//we want largest increasing order=> apply lis

class Solution {
public:
    
    static bool comparison(const vector<int> &a,const vector<int> &b)
    {
        if(a[0]!=b[0]) return a[0]<b[0]; //sorting widths ascending
        return a[1]>b[1]; //if widths are equal- sort heights descending, so that no two heights with same width can be included in lis because they will                                     //be in descending order and lis is in ascending order
    }
    
    int maxEnvelopes(vector<vector<int>>& e) {
        
        if(e.size()==0) return 0;
        
        int n=e.size();
        sort(e.begin(),e.end(),comparison);
        
        //applying lis on heights.
        int lis[e.size()];
        lis[0]=e[0][1];
        int len=1;
        for(int i=1;i<e.size();i++)
        {
            if(lis[len-1]<e[i][1])
            {
                len++;
                lis[len-1]=e[i][1];
            }
            else if(e[i][1]<= lis[0]) lis[0]=e[i][1];
            else
            {
                int start=0, end=len;
                while(end-start>1)
                {
                    int mid= start+ (end-start)/2;
                    if(lis[mid]>=e[i][1]) end=mid;
                    else start=mid;
                }
                lis[end]=e[i][1];
            }
        }
        return len;
    }
};
